% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genejam-freshen.R
\name{freshenGenes}
\alias{freshenGenes}
\title{Freshen gene annotations using Bioconductor annotation data}
\usage{
freshenGenes(
  x,
  annLib = c("", "org.Hs.eg.db"),
  tryList = c("SYMBOL2EG", "ACCNUM2EG", "ALIAS2EG"),
  finalList = c("SYMBOL"),
  split = "[ ]*[,/;]+[ ]*",
  sep = ",",
  handle_multiple = c("first_try", "first_hit", "all", "best_each"),
  empty_rule = c("original", "empty", "na"),
  include_source = FALSE,
  protect_inline_sep = TRUE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{x}{character vector or \code{data.frame} with one or most columns
containing gene symbols.}

\item{annLib}{character value indicating the name of the Bioconductor
annotation library to use when looking up gene nomenclature.}

\item{tryList}{character vector indicating one or more names of
annotations to use for the input gene symbols in \code{x}. The
annotation should typically return the Entrez gene ID, usually
given by \code{'2EG'} at the end of the name. For example \code{SYMBOL2EG}
will be used with annLib \code{"org.Hs.eg.db"} to produce annotation
name \code{"org.Hs.egSYMBOL2EG"}. Note that when the \code{'2EG'} form of
annotation does not exist, it will be derived using
\code{AnnotationDbi::revmap()}. For example if \code{"org.Hs.egALIAS"}
exists, but not \code{"org.Hs.egALIAS2EG"}, then this function will
create a reverse-mapped \code{"org.Hs.egALIAS2EG"} derived from
\code{"org.Hs.egALIAS"}.}

\item{finalList}{character vector to use for the final conversion
step. When finalList is \code{NULL} no conversion is performed.
When \code{finalList} contains multiple values, each value is returned
in the output. For example, \code{finalList=c("SYMBOL","GENENAME")} will
return a column \code{"SYMBOL"} and a column \code{"GENENAME"}.}

\item{split}{character value used to separate delimited values in \code{x}
by the function \code{base::strsplit()}. The default will split values
separated by comma \verb{,} semicolon \verb{;} or forward slash \code{/}, and will
trim whitespace before and after these delimiters.}

\item{sep}{character value used to concatenate multiple entries in
the same field. The default \code{sep=","} will comma-delimit multiple
entries in the same field.}

\item{handle_multiple}{character value indicating how to handle multiple
values: \code{"first_hit"} will query each column of \code{x} until it finds the
first possible returning match, and will ignore all subsequent possible
matches for that row in \code{x}. For example, if one row in \code{x} contains
multiple values, only the first match will be used. \code{"first_try"}
will return the first match from \code{tryList} for all columns in \code{x}
that contain a match. For example, if one row in \code{x} contains two
values, the first match from \code{tryList} using one or both columns in
\code{x} will be maintained. Subsequent entries in \code{tryList} will not be
attempted for rows that already have a match. \code{"all"} will return all
possible matches for all entries in \code{x} using all items in \code{tryList}.}

\item{empty_rule}{character value indicating how to handle entries which
did not have a match, and are therefore empty: \code{"original"} will use
the original entry as the output field; \code{"empty"} will leave the
entry blank.}

\item{include_source}{logical indicating whether to include a column
that shows the colname and source matched. For example, if column
\code{"original_gene"} matched \code{"SYMBOL2EG"} in \code{"org.Hs.eg.db"} there
will be a column \code{"found_source"} with value
\code{"original_gene.org.Hs.egSYMBOL2EG"}.}

\item{protect_inline_sep}{logical indicating whether to
protect inline characters in \code{sep}, to prevent them from
being used to split single values into multiple values.
For example, \code{"GENENAME"} returns the full gene name, which
often contains comma \code{","} characters. These commas do
not separate multiple separate values, so they should not be
used to split a string like \code{"H4 clustered histone 10, pseudogene"}
into two strings \code{"H4 clustered histone 10"} and \code{"pseudogene"}.}

\item{verbose}{logical indicating whether to print verbose output.}
}
\value{
\code{data.frame} with one or more columns indicating the input
data, then a column \code{"intermediate"} containing the Entrez gene ID
that was matched, then one column for each item in \code{finalList},
by default \code{"SYMBOL"}.
}
\description{
Freshen gene annotations using Bioconductor annotation data
}
\details{
This function takes a vector or \code{data.frame} of gene symbols,
and uses Bioconductor annotation methods to find the most current
official gene symbol.

The annotation process runs in two basic steps:
\enumerate{
\item \strong{Convert the input gene to Entrez gene ID}.
\item \strong{Convert Entrez gene ID to official gene symbol}.
}
\subsection{Step 1. Convert to Entrez gene ID}{

The first step uses an ordered list of annotations,
with the assumption that the first match is usually the best,
and most specific. By default, the order is:
\itemize{
\item \code{"org.Hs.egSYMBOL2EG"} -- almost always 1-to-1 match
\item \code{"org.Hs.egACCNUM2EG"} -- mostly a 1-to-1 match
\item \code{"org.Hs.egALIAS2EG"} -- sometimes a 1-to-1 match, sometimes 1-to-many
}

When multiple Entrez gene ID values are matched, they are all
retained. See argument \code{handle_multiple} for custom options.
}

\subsection{Step 2. Use Entrez gene ID to return official annotation}{

The second step converts the Entrez gene ID (or multiple IDs)
to the official gene symbol, by default using \code{"org.Hs.egSYMBOL"}.

The second step may optionally include multiple annotation types,
each of which will be returned. Some common examples:
\itemize{
\item \code{"org.Hs.egSYMBOL"} -- official Entrez gene symbol
\item \code{"org.Hs.egALIAS"} -- set of recognized aliases for an Entrez gene.
\item \code{"org.Hs.egGENENAME"} -- official Entrez long gene name
}

For each step, the annotation matched can be returned, as an audit
trail to see which annotation was available for each input entry.
}
}
\examples{
if (suppressPackageStartupMessages(require(org.Hs.eg.db))) {
   cat("\nBasic usage\n");
   print(freshenGenes(c("APOE", "CCN2", "CTGF")));
   
   ## Optionally show the annotation source matched
   cat("\nOptionally show the annotation source matched\n");
   print(freshenGenes(c("APOE", "CCN2", "CTGF"), include_source=TRUE));
   
   ## Show comma-delimited genes
   cat("\nInput genes are comma-delimited\n");
   print(freshenGenes(c("APOE", "CCN2", "CTGF", "CCN2,CTGF")));
   
   ## Optionally include more than SYMBOL in the output
   cat("\nCustom output to include SYMBOL, ALIAS, GENENAME\n");
   print(freshenGenes(c("APOE", "HIST1H1C"),
      finalList=c("SYMBOL", "ALIAS", "GENENAME")));
      
   ## More advanced, match affymetrix probesets
   if (suppressPackageStartupMessages(require(hgu133plus2.db))) {
      cat("\nAdvanced example including Affymetrix probesets.\n");
      print(freshenGenes(c("227047_x_at","APOE","HIST1H1D"),
         include_source=TRUE,
         tryList=c("hgu133plus2ENTREZID","org.Hs.egSYMBOL2EG","org.Hs.egALIAS2EG"),
         finalList=c("org.Hs.egSYMBOL")))
   }
}

}
\seealso{
Other genejam: 
\code{\link{get_anno_db}()}
}
\concept{genejam}
