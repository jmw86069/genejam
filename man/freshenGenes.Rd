% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genejam-freshen.R
\name{freshenGenes}
\alias{freshenGenes}
\title{Freshen gene annotations using Bioconductor annotation data}
\usage{
freshenGenes(
  x,
  annLib = c("org.Hs.eg.db"),
  tryList = c("SYMBOL2EG", "ACCNUM2EG", "ALIAS2EG"),
  finalList = c("SYMBOL"),
  split = "[ ]*[,/;]+[ ]*",
  sep = ",",
  handle_multiple = c("first_try", "first_hit", "all"),
  empty_rule = c("original", "empty"),
  include_source = FALSE,
  protect_inline_sep = TRUE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{x}{character vector or \code{data.frame} with one or most columns
containing gene symbols.}

\item{annLib}{character value indicating the name of the Bioconductor
annotation library to use when looking up gene nomenclature.}

\item{tryList}{character vector indicating one or more names of
annotations to use for the input gene symbols in \code{x}. The
annotation should typically return the Entrez gene ID, usually
given by \code{'2EG'} at the end of the name. For example \code{SYMBOL2EG}
will be used with annLib \code{"org.Hs.eg.db"} to produce annotation
name \code{"org.Hs.egSYMBOL2EG"}. Note that when the \code{'2EG'} form of
annotation does not exist, it will be derived using
\code{AnnotationDbi::revmap()}. For example if \code{"org.Hs.egALIAS"}
exists, but not \code{"org.Hs.egALIAS2EG"}, then this function will
create a reverse-mapped \code{"org.Hs.egALIAS2EG"} derived from
\code{"org.Hs.egALIAS"}.}

\item{finalList}{character vector to use for the final conversion
step. When finalList is \code{NULL} no conversion is performed.
When \code{finalList} contains multiple values, each value is returned
in the output. For example, \code{finalList=c("SYMBOL","GENENAME")} will
return a column \code{"SYMBOL"} and a column \code{"GENENAME"}.}

\item{sep}{character value used to separate delimited values in \code{x}.
For example when \code{sep=","} then comma-delimited values will be split
into separate columns, and each column can be used in the gene
annotation update. See \code{handle_multiple}.}

\item{handle_multiple}{character value indicating how to handle multiple
values: \code{"first_hit"} will query each column of \code{x} until it finds the
first possible returning match, and will ignore all subsequent possible
matches for that row in \code{x}. For example, if one row in \code{x} contains
multiple values, only the first match will be used. \code{"first_try"}
will return the first match from \code{tryList} for all columns in \code{x}
that contain a match. For example, if one row in \code{x} contains two
values, the first match from \code{tryList} using one or both columns in
\code{x} will be maintained. Subsequent entries in \code{tryList} will not be
attempted for rows that already have a match. \code{"all"} will return all
possible matches for all entries in \code{x} using all items in \code{tryList}.}

\item{empty_rule}{character value indicating how to handle entries which
did not have a match, and are therefore empty: \code{"original"} will use
the original entry as the output field; \code{"empty"} will leave the
entry blank.}

\item{include_source}{logical indicating whether to include a column
that shows the colname and source matched. For example, if column
\code{"original_gene"} matched \code{"SYMBOL2EG"} in \code{"org.Hs.eg.db"} there
will be a column \code{"found_source"} with value
\code{"original_gene.org.Hs.egSYMBOL2EG"}.}

\item{protect_inline_sep}{logical indicating whether to
protect inline characters in \code{sep}, to prevent them from
being used to split single values into multiple values.
For example, \code{"GENENAME"} returns the full gene name, which
often contains comma \code{","} characters. These commas do
not separate multiple separate values, so they should not be
used to split a string like \code{"H4 clustered histone 10, pseudogene"}
into two strings \code{"H4 clustered histone 10"} and \code{"pseudogene"}.}

\item{verbose}{logical indicating whether to print verbose output.}
}
\value{
\code{data.frame} with one or more columns indicating the input
data, then a column \code{"intermediate"} containing the Entrez gene ID
that was matched, then one column for each item in \code{finalList},
by default \code{"SYMBOL"}.
}
\description{
Freshen gene annotations using Bioconductor annotation data
}
\details{
This function takes a vector or \code{data.frame} of gene symbols,
and uses Bioconductor annotation methods to find the most current
official gene symbol.

The function can also be customized to return
additional annotation, or custom annotation.

The annotation process is intended to run in two steps:
\enumerate{
\item Convert the input gene symbol to the recognized Entrez gene ID,
usually using something like \code{"org.Hs.egSYMBOL2EG"} which returns
a character string with Entrez gene identifier. When the
gene symbol is not recognized, the backup plan is to use gene
aliases, accession numbers, or other relevant annotations to
find the current official gene. However, these steps are not
as trusted as using the \code{"SYMBOL2EG"} approach, so that step
is attempted first.
\item Convert the Entrez gene identifier to the official Entrez gene
symbol, usually using something like \code{"org.Hs.egSYMBOL"}. This
step is also a convenient time to include things like the
descriptive gene name, which is provided by \code{"org.Hs.egGENENAME"}.
}
}
\examples{
if (suppressPackageStartupMessages(require(org.Hs.eg.db))) {
   freshenGenes(c("APOE", "CCN2", "CTGF"));
   
   ## Optionally show the annotation source matched
   freshenGenes(c("APOE", "CCN2", "CTGF"), include_source=TRUE)
   
   ## Show comma-delimited genes
   freshenGenes(c("APOE", "CCN2", "CTGF", "CCN2,CTGF"));
   
   ## Optionally include more than SYMBOL in the output
   freshenGenes(c("APOE", "CCN2", "CTGF"),
      finalList=c("SYMBOL", "ALIAS", "GENENAME"))
}

}
\seealso{
Other genejam: 
\code{\link{get_anno_db}()}
}
\concept{genejam}
